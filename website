#!/usr/bin/env sh
# This file is part of website. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/website/master/COPYRIGHT. No part of website, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of website. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/website/master/COPYRIGHT.


_program()
{
	core_usesIn website miscellany
	core_usesIn git
	website()
	{
		umask 0000
		
		website_miscellany_createOutputAndCache
		
		git_changeTimestampsToLastCommit "$website_sourceFolderPath"
		
		website_miscellany_source "" "" 'source'
	}
}

_program_path_find()
{
	if [ "${_program_fattening_program_path+set}" = 'set' ]; then
		printf '%s\n' "$_program_fattening_program_path"

	elif [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"

				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

_program_name='website'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='website'

_program_commandLine_parseInitialise()
{
	_program_default_sourceFolderPath="$_program_path"/source
	_program_default_outputFolderPath="$_program_path"/output
	_program_default_cacheFolderPath="$_program_path"/cache
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]..."
	_program_commandLine_helpMessage_description="Builds a website"
	_program_commandLine_helpMessage_options="
  -s, --source-folder-path PATH  PATH to source of website. Defaults to ${_program_default_sourceFolderPath}
  -o, --output-folder-path PATH  PATH to output of website. Defaults to ${_program_default_outputFolderPath}
  -c, --cache-folder-path PATH  PATH to cache of website. Defaults to ${_program_default_cacheFolderPath}"
    _program_commandLine_helpMessage_optionsSpacing='   '
	_program_commandLine_helpMessage_configurationKeys="
  website_sourceFolderPath  Equivalent to --source-folder-path
  website_outputFolderPath  Equivalent to --output-folder-path
  website_cacheFolderPath  Equivalent to --cache-folder-path
"
	_program_commandLine_helpMessage_examples="
  ${_program_name}
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		s|source-folder-path)
			echo 'yes-argumented'
		;;
		
		o|output-folder-path)
			echo 'yes-argumented'
		;;
		
		c|cache-folder-path)
			echo 'yes-argumented'
		;;
		
		*)
			echo 'no'
		;;
		
	esac
}

_program_commandLine_processOptionWithoutArgument()
{
	:
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		s|source-folder-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			website_sourceFolderPath="$optionValue"
		;;
		
		o|output-folder-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			website_outputFolderPath="$optionValue"
		;;
		
		c|cache-folder-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			website_cacheFolderPath="$optionValue"
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	core_variable_array_initialise website_nonOptions
	core_variable_array_append website_nonOptions "$@"
}

_program_commandLine_validate()
{
	if core_variable_isUnset website_machinesPath; then
		website_sourceFolderPath="$_program_default_sourceFolderPath"
	else
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'website_sourceFolderPath' "$website_sourceFolderPath"
	fi
	
	if core_variable_isUnset website_machinesPath; then
		website_outputFolderPath="$_program_default_outputFolderPath"
	else
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'website_outputFolderPath' "$website_outputFolderPath"
	fi
	
	if core_variable_isUnset website_machinesPath; then
		website_cacheFolderPath="$_program_default_cacheFolderPath"
	else
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'website_cacheFolderPath' "$website_cacheFolderPath"
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
