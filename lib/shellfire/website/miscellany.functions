# This file is part of website. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/website/master/COPYRIGHT. No part of website, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of website. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/website/master/COPYRIGHT.


depends()
{
	local dependencyKind="$1"
	local value="$2"
	
	case "$dependencyKind" in
		
		sibling)
			local componentFolderPath="$website_current_parentComponentFolderPath"/"$value"
			local parentComponentFolderPath="$website_current_parentComponentFolderPath"
		;;
		
		child)
			local componentFolderPath="$website_current_componentFolderPath"/"$value"
			local parentComponentFolderPath="$website_current_componentFolderPath"
		;;
		
		absolute)
			local componentFolderPath="$value"
			local parentComponentFolderPath="${componentFolderPath%/*}"
		;;
		
		children)
			# A meta-target; $value is irrelevant but is normally set as '*'
			set --
			
			pushd "$website_sourceFolderPath"/"$website_current_componentFolderPath"
				
				set +f
					local folder
					for folder in *
					do
						set -f
						if [ -d "$folder" ]; then
							set -- "$@" "$folder"
						fi
					done
				set -f
								
			popd
			
			local child
			for child in "$@"
			do
				depends child "$child"
			done
		;;
		
	esac
		
	if [ -e "$(website_miscellany_cache_builtFilePath "$componentFolderPath")" ]; then
		return 0
	fi
	
	website_miscellany_source "$componentFolderPath" "$parentComponentFolderPath"
}



# website_commonmark_renderHtmlUnsafe()
# {
# 	_website_commonmark_render html false "$@"
# }
#
# core_dependency_requires '*' cmark
# _website_commonmark_render()
# {
# 	local to="$1"
# 	local shouldBeSafe="$2"
#
# 	shift 2
#
# 	if $shouldBeSafe
# 		set -- --safe "$@"
# 	else
# 		set -- "$@"
# 	fi
#
# 	set --  --to "$to" --normalize --validate-utf8 --smart "$@"
# }



core_dependency_requires '*' rm mkdir
website_miscellany_createOutputAndCache()
{
	rm -rf "$website_outputFolderPath"
	mkdir -m 0700 -p "$website_outputFolderPath"
	
	rm -rf "$website_cacheFolderPath"
	mkdir -m 0700 -p "$website_cacheFolderPath"
}

core_dependency_requires '*' mkdir
website_miscellany_createCacheFoldersForTypes()
{
	local folderType
	for folderType in built
	do
		mkdir -m 0700 -p "$website_cacheFolderPath"/"$folderType"
	done
}

website_miscellany_cacheFolderForType()
{
	local folderType="$1"
	if [ $# -eq 2 ]; then
		local componentFolderPath="$2"
	else
		local componentFolderPath="$website_current_componentFolderPath"
	fi
	
	printf '%s/%s/%s' "$website_cacheFolderPath" "$folderType" "$componentFolderPath"
}

website_miscellany_cache_builtFilePath()
{
	if [ $# -eq 1 ]; then
		local componentFolderPath="$1"
	else
		local componentFolderPath="$website_current_componentFolderPath"
	fi
	
	printf '%s' "$(website_miscellany_cacheFolderForType built "$componentFolderPath")"/.built
}

core_dependency_requires '*' mkdir
website_miscellany_source()
{
	local website_current_componentFolderPath="$1"
	local website_current_parentComponentFolderPath="$2"
	
	if [ $# -eq 3 ]; then
		local website_current_componentName="$3"
	else	
		local website_current_componentName="${website_current_componentFolderPath##*/}"
	fi
	
	local website_current_componentFilePath="$website_current_componentFolderPath"/"$website_current_componentName".functions
	
	mkdir -m 0700 -p "$(website_miscellany_cacheFolderForType built)"
	
	(
		. "$website_sourceFolderPath"/"$website_current_componentFilePath"
		
		website_build
	)
	
	printf '' >"$(website_miscellany_cache_builtFilePath "$website_current_componentFilePath")"
}
